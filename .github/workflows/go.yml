# This workflow will build a golang project for multiple platforms and update releases
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: linux-amd64
          - os: linux
            arch: 386
            suffix: linux-386
          - os: linux
            arch: arm
            suffix: linux-arm
          - os: linux
            arch: arm64
            suffix: linux-arm64
          - os: windows
            arch: amd64
            suffix: windows-amd64.exe
          - os: windows
            arch: 386
            suffix: windows-386.exe
          - os: windows
            arch: arm
            suffix: windows-arm.exe
          - os: windows
            arch: arm64
            suffix: windows-arm64.exe
          - os: darwin
            arch: amd64
            suffix: darwin-amd64
          - os: darwin
            arch: arm64
            suffix: darwin-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: go build -v -o progwrp-patcher-${{ matrix.suffix }} ./...

    - name: Get latest release
      id: get_latest_release
      run: |
        LATEST_RELEASE=$(gh api repos/${{ github.repository }}/releases/latest --jq '.id')
        echo "release_id=$LATEST_RELEASE" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete existing assets
      run: |
        # Get all assets for the latest release
        ASSETS=$(gh api repos/${{ github.repository }}/releases/${{ steps.get_latest_release.outputs.release_id }}/assets --jq '.[] | select(.name | contains("progwrp-patcher") and (.name | endswith(".zip") | not)) | .id')
        
        # Delete each existing asset
        for asset_id in $ASSETS; do
          echo "Deleting asset ID: $asset_id"
          gh api repos/${{ github.repository }}/releases/assets/$asset_id -X DELETE
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_latest_release.outputs.release_id }}/assets
        asset_path: ./progwrp-patcher-${{ matrix.suffix }}
        asset_name: progwrp-patcher-${{ matrix.suffix }}
        asset_content_type: application/octet-stream